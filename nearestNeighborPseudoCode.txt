1. Create a custom hashmap to store packages into
    * remember: The hashmap is just there to make it easier to find stuff as the key will be used to calculate the index of the list
    ** Use this structure to represent the contents of each truck, ie. Each truck will be a hashmap
    *** at the moment, you are only implementing one hashmap to store all its contents.

2. Create a list of all the locations - (Vertex list)
3. Create an adjacency list to store all the distances of a graph


Algo - Optimize Path using Nearest Neighbor:
    1. Define/Pass a list of packages that the truck will deliver we will optimize create the route based on our greedyalgorithm
    2. Create an empty list to hold the optimized_route 
    3. and create a local variable to track which packages have been optimized
    4. Define a starting vertex (this would be the HUB) and append to the optimized_route

    5. from starting vertex_a, loop through all the distances in adjacency list and find the shortest adjacent distance
        
        vertex_a = HUB
        Define minDistance = positive infinity

        unoptimized_list = truck.container
        
        Checkers: while length(unoptimized list) > 0
            for vertex_b in adjacency_list[vertex_a]:
                2. If vertex_b is in unoptimized list -> continue
                3. If vertex_b is not zero -> continue (eliminates self loops)
                4. If vertex_b not in optimized list (already) -> continue
                5. If vertex_b distance is < minDistance, then nearestNeighbor = vertex_b
            optimizedList.append(nearestNeighbor)
            vertex_a = nearestNeighbor
            minDistance = positive infinity

    6. Set the passed truck's internal route to the optimized route based on the algorithm




